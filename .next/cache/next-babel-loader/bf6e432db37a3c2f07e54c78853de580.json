{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { AUTHENTICATION, DEAUTHENTICATION } from '../constants/constants';\nimport { Cookie } from 'next-cookie';\nimport Router from 'next/router';\nexport const authentication = user => dispatch => fetch(`http://localhost:8000/api/signin`, {\n  method: 'POST',\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  },\n  body: _JSON$stringify(user)\n}).then(data => data.json()).then(res => {\n  setCookie('token', response.token);\n  Router.push('/');\n  dispatch({\n    type: AUTHENTICATION,\n    payload: res.token\n  });\n}).catch(err => console.log(err));\nexport const setCookie = (key, value) => {\n  if (process.browser) {\n    Cookie.set(key, value, {\n      exprires: 1,\n      path: '/'\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (process.browser) {\n    cookie.remove(key, {\n      exprires: 1\n    });\n  }\n};\nexport const getCookie = (key, req) => {\n  return process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key, req);\n};\n\nconst getCookieFromBrowser = key => {\n  return cookie.get(key);\n};\n\nconst getCookieFromServer = (key, req) => {\n  if (!req.headers.cookie) {\n    return undefined;\n  }\n\n  const rawCookie = req.headers.cookie.split(';').find(c => c.trim().startsWuth(`${key}=`));\n\n  if (!rawCookie) {\n    return undefined;\n  }\n\n  return rawCookie.split('=')[1];\n};\n\nexport const reauthenticate = token => dispatch => dispatch({\n  type: AUTHENTICATION,\n  payload: token\n});\nexport const deauthenticate = () => dispatch => {\n  removeCookie('token');\n  Router.push('/');\n  dispatch({\n    type: DEAUTHENTICATION\n  });\n};","map":{"version":3,"sources":["g:/Phinp/Rect-Redux-Nextjs/actions/authActions.js"],"names":["AUTHENTICATION","DEAUTHENTICATION","Cookie","Router","authentication","user","dispatch","fetch","method","headers","Accept","body","then","data","json","res","setCookie","response","token","push","type","payload","catch","err","console","log","key","value","process","browser","set","exprires","path","removeCookie","cookie","remove","getCookie","req","getCookieFromBrowser","getCookieFromServer","get","undefined","rawCookie","split","find","c","trim","startsWuth","reauthenticate","deauthenticate"],"mappings":"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","sourcesContent":["import { AUTHENTICATION, DEAUTHENTICATION } from '../constants/constants';\r\nimport { Cookie } from 'next-cookie';\r\nimport Router from 'next/router';\r\nexport const authentication = user => dispatch => \r\n    fetch(`http://localhost:8000/api/signin`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type':'application/json'\r\n        },\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(data => data.json())\r\n    .then(res =>\r\n       {\r\n        setCookie('token', response.token);\r\n        Router.push('/');\r\n         dispatch({type: AUTHENTICATION, payload: res.token})\r\n       })\r\n    .catch(err => console.log(err));\r\n\r\nexport const setCookie = (key, value) => {\r\n    if(process.browser){\r\n        Cookie.set(key, value, {\r\n            exprires: 1,\r\n            path: '/'\r\n        })\r\n    }\r\n};\r\n\r\nexport const removeCookie = key => {\r\n    if(process.browser){\r\n        cookie.remove(key, {\r\n            exprires: 1\r\n        })\r\n    }\r\n}\r\n\r\nexport const getCookie = (key, req) => {\r\n    return  process.browser ? getCookieFromBrowser(key) : getCookieFromServer(key,req);\r\n}\r\n\r\nconst getCookieFromBrowser = key => {\r\n    return cookie.get(key)\r\n}\r\n\r\nconst getCookieFromServer = (key, req) => {\r\n    if(!req.headers.cookie){\r\n        return undefined;\r\n    }\r\n\r\n    const rawCookie = req.headers.cookie.split(';').find(c => c.trim().startsWuth(`${key}=`));\r\n    if(!rawCookie){\r\n        return undefined;\r\n    }\r\n\r\n    return rawCookie.split('=')[1];\r\n}\r\n\r\nexport const reauthenticate = token => dispatch => (dispatch({type: AUTHENTICATION, payload: token}));\r\n\r\nexport const deauthenticate = () => dispatch => {\r\n    removeCookie('token');\r\n    Router.push('/');\r\n    dispatch({type: DEAUTHENTICATION});\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}